# 配置
PROTOC = protoc
GRPC_CPP_PLUGIN = grpc_cpp_plugin
GRPC_CPP_PLUGIN_PATH = $(shell which $(GRPC_CPP_PLUGIN))

# 输入的 .proto 文件路径
PROTO_PATH = ../../../protos
PROTO_GEN_DIR = ../../../protos

# 检查是否指定了 PROTO 变量
ifdef PROTO
  PROTO_FILES = $(PROTO_PATH)/$(PROTO)
else
  PROTO_FILES = $(wildcard $(PROTO_PATH)/*.proto)
endif

# 根据 .proto 文件生成的源文件和头文件
GRPC_CC_FILES = $(PROTO_FILES:$(PROTO_PATH)/%.proto=$(PROTO_GEN_DIR)/%.grpc.pb.cc)
GRPC_H_FILES = $(PROTO_FILES:$(PROTO_PATH)/%.proto=$(PROTO_GEN_DIR)/%.grpc.pb.h)
PB_CC_FILES = $(PROTO_FILES:$(PROTO_PATH)/%.proto=$(PROTO_GEN_DIR)/%.pb.cc)
PB_H_FILES = $(PROTO_FILES:$(PROTO_PATH)/%.proto=$(PROTO_GEN_DIR)/%.pb.h)

# 默认目标：生成所有 .pb 和 .grpc.pb 文件
all: $(PB_CC_FILES) $(PB_H_FILES) $(GRPC_CC_FILES) $(GRPC_H_FILES)

# 生成 .pb.cc 和 .pb.h 文件
$(PROTO_GEN_DIR)/%.pb.cc $(PROTO_GEN_DIR)/%.pb.h: $(PROTO_PATH)/%.proto
	mkdir -p $(PROTO_GEN_DIR)
	$(PROTOC) --cpp_out=$(PROTO_GEN_DIR) --proto_path=$(PROTO_PATH) $<

# 生成 .grpc.pb.cc 和 .grpc.pb.h 文件
$(PROTO_GEN_DIR)/%.grpc.pb.cc $(PROTO_GEN_DIR)/%.grpc.pb.h: $(PROTO_PATH)/%.proto
	mkdir -p $(PROTO_GEN_DIR)
	$(PROTOC) --grpc_out=$(PROTO_GEN_DIR) --plugin=protoc-gen-grpc=$(GRPC_CPP_PLUGIN_PATH) --proto_path=$(PROTO_PATH) $<

# 清理生成的文件
clean:
	rm -rf $(PROTO_GEN_DIR)/*.pb.*

.PHONY: all clean
