# 编译器和编译选项
CXX = g++
CXXFLAGS = -std=c++11 -Wall -g
CPPFLAGS = $(shell pkg-config --cflags protobuf grpc)
LDFLAGS = $(shell pkg-config --libs protobuf grpc++ grpc) -pthread

# 目录定义
ATOM_INC = atom_inc
ATOM_SRC = atom_src
PROTOS = protos
RPC_CLIENT_INC = rpc_client_inc
RPC_SERVER_INC = rpc_server_inc
SERVER_SRC = server_src
OBJS_DIR = objs
BIN_DIR = bin

# gRPC 和 Protobuf 头文件路径
GRPC_INC = /usr/local/include

# 创建输出目录
$(shell mkdir -p $(OBJS_DIR))
$(shell mkdir -p $(BIN_DIR))

# 从命令行获取 SERVICE 和 SERVER，或使用默认值
SERVICE ?= default_service
SERVER ?= default_server

# 基于 SERVICE 和 SERVER 生成源文件和头文件列表
ATOM_INCS = $(addprefix $(ATOM_INC)/, $(addsuffix .h, $(SERVICE)))
ATOM_SRCS = $(addprefix $(ATOM_SRC)/, $(addsuffix .cpp, $(SERVICE)))
PROTO_SRCS = $(addprefix $(PROTOS)/, $(addsuffix .pb.cc, $(SERVICE))) \
             $(addprefix $(PROTOS)/, $(addsuffix .grpc.pb.cc, $(SERVICE)))
PROTO_INCS = $(addprefix $(PROTOS)/, $(addsuffix .pb.h, $(SERVICE))) \
			 $(addprefix $(PROTOS)/, $(addsuffix .grpc.pb.h, $(SERVICE)))
SERVER_SRCS = $(addprefix $(SERVER_SRC)/, $(addsuffix .cpp, $(SERVER)))


ATOM_OBJS = $(addprefix $(OBJS_DIR)/, $(addsuffix _atom.o, $(SERVICE)))
PROTO_OBJS = $(addprefix $(OBJS_DIR)/, $(addsuffix _pb.o, $(SERVICE))) \
             $(addprefix $(OBJS_DIR)/, $(addsuffix _grpc_pb.o, $(SERVICE)))
SERVER_OBJS = $(addprefix $(OBJS_DIR)/, $(addsuffix  _server.o, $(SERVER)))

# RPC 客户端和服务器头文件
RPC_CLIENT_INCS = $(addprefix $(RPC_CLIENT_INC)/, $(addsuffix _client.h, $(SERVICE)))
RPC_SERVER_INCS = $(addprefix $(RPC_SERVER_INC)/, $(addsuffix _impl.h, $(SERVICE)))


# 所有对象文件
ALL_OBJS = $(ATOM_OBJS) $(PROTO_OBJS) $(SERVER_OBJS)

# 可执行文件列表
EXECUTABLES = $(addprefix $(BIN_DIR)/, $(SERVER))

# 编译所有目标
all: $(EXECUTABLES)
	@echo "SERVICE: $(SERVICE)"
	@echo "ATOM_SRCS: $(ATOM_SRCS)"
	@echo "PROTO_SRCS: $(PROTO_SRCS)"
	@echo "ATOM_OBJS: $(ATOM_OBJS)"
	@echo "PROTO_OBJS: $(PROTO_OBJS)"
	@echo "ALL_OBJS: $(ALL_OBJS)"
	@echo "SERVER": $(SERVER)
	@echo "SERVER_SRCS": $(SERVER_SRCS)
	@echo "SERVER_OBJS": $(SERVER_OBJS)
	@echo "EXECUTABLES": $(EXECUTABLES)

# 链接生成可执行文件
$(BIN_DIR)/%: $(OBJS_DIR)/%_server.o $(ATOM_OBJS) $(PROTO_OBJS) 
	@echo ">>>>[INFO] Linking $@..."
	$(CXX) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

# 编译原子服务源文件
$(OBJS_DIR)/%_atom.o: $(ATOM_SRC)/%.cpp $(ATOM_INC)/%.h
	@echo ">>>>[INFO] Compiling $<..."
	$(CXX) $(CXXFLAGS) -I$(ATOM_INC) -c $< -o $@

# 编译 Protobuf 生成的源文件
$(OBJS_DIR)/%_pb.o: $(PROTOS)/%.pb.cc $(PROTOS)/%.pb.h
	@echo ">>>>[INFO] Compiling $<..."
	$(CXX) $(CXXFLAGS) -I$(PROTOS) -I$(GRPC_INC) -c $< -o $@

$(OBJS_DIR)/%_grpc_pb.o: $(PROTOS)/%.grpc.pb.cc $(PROTOS)/%.grpc.pb.h $(PROTOS)/%.pb.h
	@echo ">>>>[INFO] Compiling $<..."
	$(CXX) $(CXXFLAGS) -I$(PROTOS) -I$(GRPC_INC) -c $< -o $@

# 编译服务器源文件
$(OBJS_DIR)/%_server.o: $(SERVER_SRC)/%.cpp  $(ATOM_INCS) $(RPC_SERVER_INCS) $(RPC_CLIENT_INCS)
	@echo ">>>>[INFO] Compiling $<..."
	$(CXX) $(CXXFLAGS) -I$(ATOM_INC) -I$(RPC_SERVER_INC) -I$(RPC_CLIENT_INC) -c $< -o $@


# 清理目标
clean:
	@echo ">>>>[INFO] Cleaning up..."
	rm -f $(OBJS_DIR)/*.o
	@echo ">>>>[INFO] Clean up finished."

# 声明伪目标
.PHONY: all clean
