// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atomic_service_sf.proto

#include "atomic_service_sf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace atomic_service_sf_Package {
PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Request_st::atomic_service_sf_task_C_Request_st(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct atomic_service_sf_task_C_Request_stDefaultTypeInternal {
  PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Request_stDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~atomic_service_sf_task_C_Request_stDefaultTypeInternal() {}
  union {
    atomic_service_sf_task_C_Request_st _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 atomic_service_sf_task_C_Request_stDefaultTypeInternal _atomic_service_sf_task_C_Request_st_default_instance_;
PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Reply_st::atomic_service_sf_task_C_Reply_st(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct atomic_service_sf_task_C_Reply_stDefaultTypeInternal {
  PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Reply_stDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~atomic_service_sf_task_C_Reply_stDefaultTypeInternal() {}
  union {
    atomic_service_sf_task_C_Reply_st _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 atomic_service_sf_task_C_Reply_stDefaultTypeInternal _atomic_service_sf_task_C_Reply_st_default_instance_;
PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Request_st::atomic_service_sf_task_D_Request_st(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int_array_)*/{}
  , /*decltype(_impl_._int_array_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct atomic_service_sf_task_D_Request_stDefaultTypeInternal {
  PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Request_stDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~atomic_service_sf_task_D_Request_stDefaultTypeInternal() {}
  union {
    atomic_service_sf_task_D_Request_st _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 atomic_service_sf_task_D_Request_stDefaultTypeInternal _atomic_service_sf_task_D_Request_st_default_instance_;
PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st::atomic_service_sf_task_D_Reply_st(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.string_int_map_reply_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.return_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct atomic_service_sf_task_D_Reply_stDefaultTypeInternal {
  PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_stDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~atomic_service_sf_task_D_Reply_stDefaultTypeInternal() {}
  union {
    atomic_service_sf_task_D_Reply_st _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 atomic_service_sf_task_D_Reply_stDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_default_instance_;
}  // namespace atomic_service_sf_Package
static ::_pb::Metadata file_level_metadata_atomic_5fservice_5fsf_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_atomic_5fservice_5fsf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_atomic_5fservice_5fsf_2eproto = nullptr;

const uint32_t TableStruct_atomic_5fservice_5fsf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, _impl_.return_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st, _impl_.int_array_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, _impl_.string_int_map_reply_),
  PROTOBUF_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, _impl_.return_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st)},
  { 8, -1, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st)},
  { 16, -1, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st)},
  { 23, 31, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::atomic_service_sf_Package::_atomic_service_sf_task_C_Request_st_default_instance_._instance,
  &::atomic_service_sf_Package::_atomic_service_sf_task_C_Reply_st_default_instance_._instance,
  &::atomic_service_sf_Package::_atomic_service_sf_task_D_Request_st_default_instance_._instance,
  &::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_._instance,
  &::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_default_instance_._instance,
};

const char descriptor_table_protodef_atomic_5fservice_5fsf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027atomic_service_sf.proto\022\031atomic_servic"
  "e_sf_Package\"B\n#atomic_service_sf_task_C"
  "_Request_st\022\014\n\004name\030\001 \001(\t\022\r\n\005title\030\002 \001(\t"
  "\"H\n!atomic_service_sf_task_C_Reply_st\022\016\n"
  "\006result\030\001 \001(\t\022\023\n\013return_type\030\002 \001(\005\"8\n#at"
  "omic_service_sf_task_D_Request_st\022\021\n\tint"
  "_array\030\001 \003(\005\"\345\001\n!atomic_service_sf_task_"
  "D_Reply_st\022q\n\024string_int_map_reply\030\001 \003(\013"
  "2S.atomic_service_sf_Package.atomic_serv"
  "ice_sf_task_D_Reply_st.StringIntMapReply"
  "Entry\022\023\n\013return_type\030\002 \001(\005\0328\n\026StringIntM"
  "apReplyEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005"
  ":\0028\0012\327\002\n\031atomic_service_sf_Service\022\233\001\n\031a"
  "tomic_service_fun_task_C\022>.atomic_servic"
  "e_sf_Package.atomic_service_sf_task_C_Re"
  "quest_st\032<.atomic_service_sf_Package.ato"
  "mic_service_sf_task_C_Reply_st\"\000\022\233\001\n\031ato"
  "mic_service_fun_task_D\022>.atomic_service_"
  "sf_Package.atomic_service_sf_task_D_Requ"
  "est_st\032<.atomic_service_sf_Package.atomi"
  "c_service_sf_task_D_Reply_st\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_atomic_5fservice_5fsf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_atomic_5fservice_5fsf_2eproto = {
    false, false, 838, descriptor_table_protodef_atomic_5fservice_5fsf_2eproto,
    "atomic_service_sf.proto",
    &descriptor_table_atomic_5fservice_5fsf_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_atomic_5fservice_5fsf_2eproto::offsets,
    file_level_metadata_atomic_5fservice_5fsf_2eproto, file_level_enum_descriptors_atomic_5fservice_5fsf_2eproto,
    file_level_service_descriptors_atomic_5fservice_5fsf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_atomic_5fservice_5fsf_2eproto_getter() {
  return &descriptor_table_atomic_5fservice_5fsf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_atomic_5fservice_5fsf_2eproto(&descriptor_table_atomic_5fservice_5fsf_2eproto);
namespace atomic_service_sf_Package {

// ===================================================================

class atomic_service_sf_task_C_Request_st::_Internal {
 public:
};

atomic_service_sf_task_C_Request_st::atomic_service_sf_task_C_Request_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
}
atomic_service_sf_task_C_Request_st::atomic_service_sf_task_C_Request_st(const atomic_service_sf_task_C_Request_st& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  atomic_service_sf_task_C_Request_st* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
}

inline void atomic_service_sf_task_C_Request_st::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

atomic_service_sf_task_C_Request_st::~atomic_service_sf_task_C_Request_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void atomic_service_sf_task_C_Request_st::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.title_.Destroy();
}

void atomic_service_sf_task_C_Request_st::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void atomic_service_sf_task_C_Request_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atomic_service_sf_task_C_Request_st::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atomic_service_sf_task_C_Request_st::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  return target;
}

size_t atomic_service_sf_task_C_Request_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atomic_service_sf_task_C_Request_st::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    atomic_service_sf_task_C_Request_st::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atomic_service_sf_task_C_Request_st::GetClassData() const { return &_class_data_; }


void atomic_service_sf_task_C_Request_st::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<atomic_service_sf_task_C_Request_st*>(&to_msg);
  auto& from = static_cast<const atomic_service_sf_task_C_Request_st&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atomic_service_sf_task_C_Request_st::CopyFrom(const atomic_service_sf_task_C_Request_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_C_Request_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_C_Request_st::InternalSwap(atomic_service_sf_task_C_Request_st* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata atomic_service_sf_task_C_Request_st::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fservice_5fsf_2eproto_getter, &descriptor_table_atomic_5fservice_5fsf_2eproto_once,
      file_level_metadata_atomic_5fservice_5fsf_2eproto[0]);
}

// ===================================================================

class atomic_service_sf_task_C_Reply_st::_Internal {
 public:
};

atomic_service_sf_task_C_Reply_st::atomic_service_sf_task_C_Reply_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
}
atomic_service_sf_task_C_Reply_st::atomic_service_sf_task_C_Reply_st(const atomic_service_sf_task_C_Reply_st& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  atomic_service_sf_task_C_Reply_st* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.return_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.return_type_ = from._impl_.return_type_;
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
}

inline void atomic_service_sf_task_C_Reply_st::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.return_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

atomic_service_sf_task_C_Reply_st::~atomic_service_sf_task_C_Reply_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void atomic_service_sf_task_C_Reply_st::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void atomic_service_sf_task_C_Reply_st::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void atomic_service_sf_task_C_Reply_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _impl_.return_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atomic_service_sf_task_C_Reply_st::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result"));
        } else
          goto handle_unusual;
        continue;
      // int32 return_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.return_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atomic_service_sf_task_C_Reply_st::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  // int32 return_type = 2;
  if (this->_internal_return_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_return_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  return target;
}

size_t atomic_service_sf_task_C_Reply_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // int32 return_type = 2;
  if (this->_internal_return_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atomic_service_sf_task_C_Reply_st::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    atomic_service_sf_task_C_Reply_st::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atomic_service_sf_task_C_Reply_st::GetClassData() const { return &_class_data_; }


void atomic_service_sf_task_C_Reply_st::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<atomic_service_sf_task_C_Reply_st*>(&to_msg);
  auto& from = static_cast<const atomic_service_sf_task_C_Reply_st&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_return_type() != 0) {
    _this->_internal_set_return_type(from._internal_return_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atomic_service_sf_task_C_Reply_st::CopyFrom(const atomic_service_sf_task_C_Reply_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_C_Reply_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_C_Reply_st::InternalSwap(atomic_service_sf_task_C_Reply_st* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.return_type_, other->_impl_.return_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atomic_service_sf_task_C_Reply_st::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fservice_5fsf_2eproto_getter, &descriptor_table_atomic_5fservice_5fsf_2eproto_once,
      file_level_metadata_atomic_5fservice_5fsf_2eproto[1]);
}

// ===================================================================

class atomic_service_sf_task_D_Request_st::_Internal {
 public:
};

atomic_service_sf_task_D_Request_st::atomic_service_sf_task_D_Request_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
}
atomic_service_sf_task_D_Request_st::atomic_service_sf_task_D_Request_st(const atomic_service_sf_task_D_Request_st& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  atomic_service_sf_task_D_Request_st* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int_array_){from._impl_.int_array_}
    , /*decltype(_impl_._int_array_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
}

inline void atomic_service_sf_task_D_Request_st::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int_array_){arena}
    , /*decltype(_impl_._int_array_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

atomic_service_sf_task_D_Request_st::~atomic_service_sf_task_D_Request_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void atomic_service_sf_task_D_Request_st::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int_array_.~RepeatedField();
}

void atomic_service_sf_task_D_Request_st::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void atomic_service_sf_task_D_Request_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atomic_service_sf_task_D_Request_st::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 int_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_int_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atomic_service_sf_task_D_Request_st::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int_array = 1;
  {
    int byte_size = _impl_._int_array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_int_array(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  return target;
}

size_t atomic_service_sf_task_D_Request_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int_array = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int_array_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int_array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atomic_service_sf_task_D_Request_st::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    atomic_service_sf_task_D_Request_st::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atomic_service_sf_task_D_Request_st::GetClassData() const { return &_class_data_; }


void atomic_service_sf_task_D_Request_st::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<atomic_service_sf_task_D_Request_st*>(&to_msg);
  auto& from = static_cast<const atomic_service_sf_task_D_Request_st&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int_array_.MergeFrom(from._impl_.int_array_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atomic_service_sf_task_D_Request_st::CopyFrom(const atomic_service_sf_task_D_Request_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_D_Request_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_D_Request_st::InternalSwap(atomic_service_sf_task_D_Request_st* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int_array_.InternalSwap(&other->_impl_.int_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atomic_service_sf_task_D_Request_st::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fservice_5fsf_2eproto_getter, &descriptor_table_atomic_5fservice_5fsf_2eproto_once,
      file_level_metadata_atomic_5fservice_5fsf_2eproto[2]);
}

// ===================================================================

atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse() {}
atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::MergeFrom(const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fservice_5fsf_2eproto_getter, &descriptor_table_atomic_5fservice_5fsf_2eproto_once,
      file_level_metadata_atomic_5fservice_5fsf_2eproto[3]);
}

// ===================================================================

class atomic_service_sf_task_D_Reply_st::_Internal {
 public:
};

atomic_service_sf_task_D_Reply_st::atomic_service_sf_task_D_Reply_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &atomic_service_sf_task_D_Reply_st::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
}
atomic_service_sf_task_D_Reply_st::atomic_service_sf_task_D_Reply_st(const atomic_service_sf_task_D_Reply_st& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  atomic_service_sf_task_D_Reply_st* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.string_int_map_reply_)*/{}
    , decltype(_impl_.return_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.string_int_map_reply_.MergeFrom(from._impl_.string_int_map_reply_);
  _this->_impl_.return_type_ = from._impl_.return_type_;
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
}

inline void atomic_service_sf_task_D_Reply_st::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.string_int_map_reply_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.return_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

atomic_service_sf_task_D_Reply_st::~atomic_service_sf_task_D_Reply_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void atomic_service_sf_task_D_Reply_st::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_int_map_reply_.Destruct();
  _impl_.string_int_map_reply_.~MapField();
}

void atomic_service_sf_task_D_Reply_st::ArenaDtor(void* object) {
  atomic_service_sf_task_D_Reply_st* _this = reinterpret_cast< atomic_service_sf_task_D_Reply_st* >(object);
  _this->_impl_.string_int_map_reply_.Destruct();
}
void atomic_service_sf_task_D_Reply_st::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void atomic_service_sf_task_D_Reply_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.string_int_map_reply_.Clear();
  _impl_.return_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atomic_service_sf_task_D_Reply_st::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> string_int_map_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.string_int_map_reply_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 return_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.return_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atomic_service_sf_task_D_Reply_st::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> string_int_map_reply = 1;
  if (!this->_internal_string_int_map_reply().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_string_int_map_reply();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.StringIntMapReplyEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int32 return_type = 2;
  if (this->_internal_return_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_return_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  return target;
}

size_t atomic_service_sf_task_D_Reply_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> string_int_map_reply = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_int_map_reply_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_string_int_map_reply().begin();
      it != this->_internal_string_int_map_reply().end(); ++it) {
    total_size += atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 return_type = 2;
  if (this->_internal_return_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atomic_service_sf_task_D_Reply_st::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    atomic_service_sf_task_D_Reply_st::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atomic_service_sf_task_D_Reply_st::GetClassData() const { return &_class_data_; }


void atomic_service_sf_task_D_Reply_st::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<atomic_service_sf_task_D_Reply_st*>(&to_msg);
  auto& from = static_cast<const atomic_service_sf_task_D_Reply_st&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.string_int_map_reply_.MergeFrom(from._impl_.string_int_map_reply_);
  if (from._internal_return_type() != 0) {
    _this->_internal_set_return_type(from._internal_return_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atomic_service_sf_task_D_Reply_st::CopyFrom(const atomic_service_sf_task_D_Reply_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_D_Reply_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_D_Reply_st::InternalSwap(atomic_service_sf_task_D_Reply_st* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.string_int_map_reply_.InternalSwap(&other->_impl_.string_int_map_reply_);
  swap(_impl_.return_type_, other->_impl_.return_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atomic_service_sf_task_D_Reply_st::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fservice_5fsf_2eproto_getter, &descriptor_table_atomic_5fservice_5fsf_2eproto_once,
      file_level_metadata_atomic_5fservice_5fsf_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace atomic_service_sf_Package
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st*
Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st >(arena);
}
template<> PROTOBUF_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st*
Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st >(arena);
}
template<> PROTOBUF_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st*
Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st >(arena);
}
template<> PROTOBUF_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse*
Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st*
Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
