// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: atomic_service_sf.proto
// Protobuf C++ Version: 5.29.0

#ifndef atomic_5fservice_5fsf_2eproto_2epb_2eh
#define atomic_5fservice_5fsf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_atomic_5fservice_5fsf_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_atomic_5fservice_5fsf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_atomic_5fservice_5fsf_2eproto;
namespace atomic_service_sf_Package {
class atomic_service_sf_task_C_Reply_st;
struct atomic_service_sf_task_C_Reply_stDefaultTypeInternal;
extern atomic_service_sf_task_C_Reply_stDefaultTypeInternal _atomic_service_sf_task_C_Reply_st_default_instance_;
class atomic_service_sf_task_C_Request_st;
struct atomic_service_sf_task_C_Request_stDefaultTypeInternal;
extern atomic_service_sf_task_C_Request_stDefaultTypeInternal _atomic_service_sf_task_C_Request_st_default_instance_;
class atomic_service_sf_task_D_Reply_st;
struct atomic_service_sf_task_D_Reply_stDefaultTypeInternal;
extern atomic_service_sf_task_D_Reply_stDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_default_instance_;
class atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse;
struct atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal;
extern atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_;
class atomic_service_sf_task_D_Request_st;
struct atomic_service_sf_task_D_Request_stDefaultTypeInternal;
extern atomic_service_sf_task_D_Request_stDefaultTypeInternal _atomic_service_sf_task_D_Request_st_default_instance_;
}  // namespace atomic_service_sf_Package
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace atomic_service_sf_Package {

// ===================================================================


// -------------------------------------------------------------------

class atomic_service_sf_task_D_Request_st final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st) */ {
 public:
  inline atomic_service_sf_task_D_Request_st() : atomic_service_sf_task_D_Request_st(nullptr) {}
  ~atomic_service_sf_task_D_Request_st() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(atomic_service_sf_task_D_Request_st* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(atomic_service_sf_task_D_Request_st));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Request_st(
      ::google::protobuf::internal::ConstantInitialized);

  inline atomic_service_sf_task_D_Request_st(const atomic_service_sf_task_D_Request_st& from) : atomic_service_sf_task_D_Request_st(nullptr, from) {}
  inline atomic_service_sf_task_D_Request_st(atomic_service_sf_task_D_Request_st&& from) noexcept
      : atomic_service_sf_task_D_Request_st(nullptr, std::move(from)) {}
  inline atomic_service_sf_task_D_Request_st& operator=(const atomic_service_sf_task_D_Request_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_D_Request_st& operator=(atomic_service_sf_task_D_Request_st&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_D_Request_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_D_Request_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_D_Request_st*>(
        &_atomic_service_sf_task_D_Request_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(atomic_service_sf_task_D_Request_st& a, atomic_service_sf_task_D_Request_st& b) { a.Swap(&b); }
  inline void Swap(atomic_service_sf_task_D_Request_st* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_D_Request_st* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_D_Request_st* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<atomic_service_sf_task_D_Request_st>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_D_Request_st& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const atomic_service_sf_task_D_Request_st& from) { atomic_service_sf_task_D_Request_st::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(atomic_service_sf_task_D_Request_st* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "atomic_service_sf_Package.atomic_service_sf_task_D_Request_st"; }

 protected:
  explicit atomic_service_sf_task_D_Request_st(::google::protobuf::Arena* arena);
  atomic_service_sf_task_D_Request_st(::google::protobuf::Arena* arena, const atomic_service_sf_task_D_Request_st& from);
  atomic_service_sf_task_D_Request_st(::google::protobuf::Arena* arena, atomic_service_sf_task_D_Request_st&& from) noexcept
      : atomic_service_sf_task_D_Request_st(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntArrayFieldNumber = 1,
  };
  // repeated int32 int_array = 1;
  int int_array_size() const;
  private:
  int _internal_int_array_size() const;

  public:
  void clear_int_array() ;
  ::int32_t int_array(int index) const;
  void set_int_array(int index, ::int32_t value);
  void add_int_array(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& int_array() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_int_array();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int_array() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int_array();

  public:
  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const atomic_service_sf_task_D_Request_st& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> int_array_;
    ::google::protobuf::internal::CachedSize _int_array_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse*>(
        &_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      94, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_C_Request_st final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st) */ {
 public:
  inline atomic_service_sf_task_C_Request_st() : atomic_service_sf_task_C_Request_st(nullptr) {}
  ~atomic_service_sf_task_C_Request_st() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(atomic_service_sf_task_C_Request_st* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(atomic_service_sf_task_C_Request_st));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Request_st(
      ::google::protobuf::internal::ConstantInitialized);

  inline atomic_service_sf_task_C_Request_st(const atomic_service_sf_task_C_Request_st& from) : atomic_service_sf_task_C_Request_st(nullptr, from) {}
  inline atomic_service_sf_task_C_Request_st(atomic_service_sf_task_C_Request_st&& from) noexcept
      : atomic_service_sf_task_C_Request_st(nullptr, std::move(from)) {}
  inline atomic_service_sf_task_C_Request_st& operator=(const atomic_service_sf_task_C_Request_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_C_Request_st& operator=(atomic_service_sf_task_C_Request_st&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_C_Request_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_C_Request_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_C_Request_st*>(
        &_atomic_service_sf_task_C_Request_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(atomic_service_sf_task_C_Request_st& a, atomic_service_sf_task_C_Request_st& b) { a.Swap(&b); }
  inline void Swap(atomic_service_sf_task_C_Request_st* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_C_Request_st* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_C_Request_st* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<atomic_service_sf_task_C_Request_st>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_C_Request_st& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const atomic_service_sf_task_C_Request_st& from) { atomic_service_sf_task_C_Request_st::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(atomic_service_sf_task_C_Request_st* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st"; }

 protected:
  explicit atomic_service_sf_task_C_Request_st(::google::protobuf::Arena* arena);
  atomic_service_sf_task_C_Request_st(::google::protobuf::Arena* arena, const atomic_service_sf_task_C_Request_st& from);
  atomic_service_sf_task_C_Request_st(::google::protobuf::Arena* arena, atomic_service_sf_task_C_Request_st&& from) noexcept
      : atomic_service_sf_task_C_Request_st(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const atomic_service_sf_task_C_Request_st& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_C_Reply_st final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st) */ {
 public:
  inline atomic_service_sf_task_C_Reply_st() : atomic_service_sf_task_C_Reply_st(nullptr) {}
  ~atomic_service_sf_task_C_Reply_st() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(atomic_service_sf_task_C_Reply_st* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(atomic_service_sf_task_C_Reply_st));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Reply_st(
      ::google::protobuf::internal::ConstantInitialized);

  inline atomic_service_sf_task_C_Reply_st(const atomic_service_sf_task_C_Reply_st& from) : atomic_service_sf_task_C_Reply_st(nullptr, from) {}
  inline atomic_service_sf_task_C_Reply_st(atomic_service_sf_task_C_Reply_st&& from) noexcept
      : atomic_service_sf_task_C_Reply_st(nullptr, std::move(from)) {}
  inline atomic_service_sf_task_C_Reply_st& operator=(const atomic_service_sf_task_C_Reply_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_C_Reply_st& operator=(atomic_service_sf_task_C_Reply_st&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_C_Reply_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_C_Reply_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_C_Reply_st*>(
        &_atomic_service_sf_task_C_Reply_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(atomic_service_sf_task_C_Reply_st& a, atomic_service_sf_task_C_Reply_st& b) { a.Swap(&b); }
  inline void Swap(atomic_service_sf_task_C_Reply_st* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_C_Reply_st* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_C_Reply_st* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<atomic_service_sf_task_C_Reply_st>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_C_Reply_st& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const atomic_service_sf_task_C_Reply_st& from) { atomic_service_sf_task_C_Reply_st::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(atomic_service_sf_task_C_Reply_st* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st"; }

 protected:
  explicit atomic_service_sf_task_C_Reply_st(::google::protobuf::Arena* arena);
  atomic_service_sf_task_C_Reply_st(::google::protobuf::Arena* arena, const atomic_service_sf_task_C_Reply_st& from);
  atomic_service_sf_task_C_Reply_st(::google::protobuf::Arena* arena, atomic_service_sf_task_C_Reply_st&& from) noexcept
      : atomic_service_sf_task_C_Reply_st(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
  };
  // string result = 1;
  void clear_result() ;
  const std::string& result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* value);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // int32 return_type = 2;
  void clear_return_type() ;
  ::int32_t return_type() const;
  void set_return_type(::int32_t value);

  private:
  ::int32_t _internal_return_type() const;
  void _internal_set_return_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const atomic_service_sf_task_C_Reply_st& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_;
    ::int32_t return_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_D_Reply_st final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st) */ {
 public:
  inline atomic_service_sf_task_D_Reply_st() : atomic_service_sf_task_D_Reply_st(nullptr) {}
  ~atomic_service_sf_task_D_Reply_st() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(atomic_service_sf_task_D_Reply_st* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(atomic_service_sf_task_D_Reply_st));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st(
      ::google::protobuf::internal::ConstantInitialized);

  inline atomic_service_sf_task_D_Reply_st(const atomic_service_sf_task_D_Reply_st& from) : atomic_service_sf_task_D_Reply_st(nullptr, from) {}
  inline atomic_service_sf_task_D_Reply_st(atomic_service_sf_task_D_Reply_st&& from) noexcept
      : atomic_service_sf_task_D_Reply_st(nullptr, std::move(from)) {}
  inline atomic_service_sf_task_D_Reply_st& operator=(const atomic_service_sf_task_D_Reply_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_D_Reply_st& operator=(atomic_service_sf_task_D_Reply_st&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_D_Reply_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_D_Reply_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_D_Reply_st*>(
        &_atomic_service_sf_task_D_Reply_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(atomic_service_sf_task_D_Reply_st& a, atomic_service_sf_task_D_Reply_st& b) { a.Swap(&b); }
  inline void Swap(atomic_service_sf_task_D_Reply_st* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_D_Reply_st* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_D_Reply_st* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<atomic_service_sf_task_D_Reply_st>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_D_Reply_st& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const atomic_service_sf_task_D_Reply_st& from) { atomic_service_sf_task_D_Reply_st::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(atomic_service_sf_task_D_Reply_st* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st"; }

 protected:
  explicit atomic_service_sf_task_D_Reply_st(::google::protobuf::Arena* arena);
  atomic_service_sf_task_D_Reply_st(::google::protobuf::Arena* arena, const atomic_service_sf_task_D_Reply_st& from);
  atomic_service_sf_task_D_Reply_st(::google::protobuf::Arena* arena, atomic_service_sf_task_D_Reply_st&& from) noexcept
      : atomic_service_sf_task_D_Reply_st(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringIntMapReplyFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
  };
  // map<string, int32> string_int_map_reply = 1;
  int string_int_map_reply_size() const;
  private:
  int _internal_string_int_map_reply_size() const;

  public:
  void clear_string_int_map_reply() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& string_int_map_reply() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_string_int_map_reply();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_string_int_map_reply() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_string_int_map_reply();

  public:
  // int32 return_type = 2;
  void clear_return_type() ;
  ::int32_t return_type() const;
  void set_return_type(::int32_t value);

  private:
  ::int32_t _internal_return_type() const;
  void _internal_set_return_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const atomic_service_sf_task_D_Reply_st& from_msg);
    ::google::protobuf::internal::MapField<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        string_int_map_reply_;
    ::int32_t return_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// atomic_service_sf_task_C_Request_st

// string name = 1;
inline void atomic_service_sf_task_C_Request_st::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Request_st::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void atomic_service_sf_task_C_Request_st::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
}
inline std::string* atomic_service_sf_task_C_Request_st::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Request_st::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void atomic_service_sf_task_C_Request_st::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* atomic_service_sf_task_C_Request_st::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* atomic_service_sf_task_C_Request_st::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _impl_.name_.Release();
}
inline void atomic_service_sf_task_C_Request_st::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
}

// string title = 2;
inline void atomic_service_sf_task_C_Request_st::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Request_st::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void atomic_service_sf_task_C_Request_st::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
}
inline std::string* atomic_service_sf_task_C_Request_st::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Request_st::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void atomic_service_sf_task_C_Request_st::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* atomic_service_sf_task_C_Request_st::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* atomic_service_sf_task_C_Request_st::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _impl_.title_.Release();
}
inline void atomic_service_sf_task_C_Request_st::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
}

// -------------------------------------------------------------------

// atomic_service_sf_task_C_Reply_st

// string result = 1;
inline void atomic_service_sf_task_C_Reply_st::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Reply_st::result() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void atomic_service_sf_task_C_Reply_st::set_result(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
}
inline std::string* atomic_service_sf_task_C_Reply_st::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Reply_st::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_.Get();
}
inline void atomic_service_sf_task_C_Reply_st::_internal_set_result(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(value, GetArena());
}
inline std::string* atomic_service_sf_task_C_Reply_st::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_.Mutable( GetArena());
}
inline std::string* atomic_service_sf_task_C_Reply_st::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _impl_.result_.Release();
}
inline void atomic_service_sf_task_C_Reply_st::set_allocated_result(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
}

// int32 return_type = 2;
inline void atomic_service_sf_task_C_Reply_st::clear_return_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.return_type_ = 0;
}
inline ::int32_t atomic_service_sf_task_C_Reply_st::return_type() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.return_type)
  return _internal_return_type();
}
inline void atomic_service_sf_task_C_Reply_st::set_return_type(::int32_t value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.return_type)
}
inline ::int32_t atomic_service_sf_task_C_Reply_st::_internal_return_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.return_type_;
}
inline void atomic_service_sf_task_C_Reply_st::_internal_set_return_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.return_type_ = value;
}

// -------------------------------------------------------------------

// atomic_service_sf_task_D_Request_st

// repeated int32 int_array = 1;
inline int atomic_service_sf_task_D_Request_st::_internal_int_array_size() const {
  return _internal_int_array().size();
}
inline int atomic_service_sf_task_D_Request_st::int_array_size() const {
  return _internal_int_array_size();
}
inline void atomic_service_sf_task_D_Request_st::clear_int_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_array_.Clear();
}
inline ::int32_t atomic_service_sf_task_D_Request_st::int_array(int index) const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  return _internal_int_array().Get(index);
}
inline void atomic_service_sf_task_D_Request_st::set_int_array(int index, ::int32_t value) {
  _internal_mutable_int_array()->Set(index, value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
}
inline void atomic_service_sf_task_D_Request_st::add_int_array(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_int_array()->Add(value);
  // @@protoc_insertion_point(field_add:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& atomic_service_sf_task_D_Request_st::int_array() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  return _internal_int_array();
}
inline ::google::protobuf::RepeatedField<::int32_t>* atomic_service_sf_task_D_Request_st::mutable_int_array()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int_array();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
atomic_service_sf_task_D_Request_st::_internal_int_array() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_array_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* atomic_service_sf_task_D_Request_st::_internal_mutable_int_array() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int_array_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// atomic_service_sf_task_D_Reply_st

// map<string, int32> string_int_map_reply = 1;
inline int atomic_service_sf_task_D_Reply_st::_internal_string_int_map_reply_size() const {
  return _internal_string_int_map_reply().size();
}
inline int atomic_service_sf_task_D_Reply_st::string_int_map_reply_size() const {
  return _internal_string_int_map_reply_size();
}
inline void atomic_service_sf_task_D_Reply_st::clear_string_int_map_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_int_map_reply_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& atomic_service_sf_task_D_Reply_st::_internal_string_int_map_reply() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_int_map_reply_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& atomic_service_sf_task_D_Reply_st::string_int_map_reply() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.string_int_map_reply)
  return _internal_string_int_map_reply();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* atomic_service_sf_task_D_Reply_st::_internal_mutable_string_int_map_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.string_int_map_reply_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* atomic_service_sf_task_D_Reply_st::mutable_string_int_map_reply() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.string_int_map_reply)
  return _internal_mutable_string_int_map_reply();
}

// int32 return_type = 2;
inline void atomic_service_sf_task_D_Reply_st::clear_return_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.return_type_ = 0;
}
inline ::int32_t atomic_service_sf_task_D_Reply_st::return_type() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.return_type)
  return _internal_return_type();
}
inline void atomic_service_sf_task_D_Reply_st::set_return_type(::int32_t value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.return_type)
}
inline ::int32_t atomic_service_sf_task_D_Reply_st::_internal_return_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.return_type_;
}
inline void atomic_service_sf_task_D_Reply_st::_internal_set_return_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.return_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace atomic_service_sf_Package


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // atomic_5fservice_5fsf_2eproto_2epb_2eh
