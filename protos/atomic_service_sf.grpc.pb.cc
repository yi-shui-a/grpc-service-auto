// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: atomic_service_sf.proto

#include "atomic_service_sf.pb.h"
#include "atomic_service_sf.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace atomic_service_sf_Package {

static const char* atomic_service_sf_Service_method_names[] = {
  "/atomic_service_sf_Package.atomic_service_sf_Service/atomic_service_fun_task_C",
  "/atomic_service_sf_Package.atomic_service_sf_Service/atomic_service_fun_task_D",
};

std::unique_ptr< atomic_service_sf_Service::Stub> atomic_service_sf_Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< atomic_service_sf_Service::Stub> stub(new atomic_service_sf_Service::Stub(channel));
  return stub;
}

atomic_service_sf_Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_atomic_service_fun_task_C_(atomic_service_sf_Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_atomic_service_fun_task_D_(atomic_service_sf_Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status atomic_service_sf_Service::Stub::atomic_service_fun_task_C(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st& request, ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_atomic_service_fun_task_C_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>* atomic_service_sf_Service::Stub::Asyncatomic_service_fun_task_CRaw(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>::Create(channel_.get(), cq, rpcmethod_atomic_service_fun_task_C_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>* atomic_service_sf_Service::Stub::PrepareAsyncatomic_service_fun_task_CRaw(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>::Create(channel_.get(), cq, rpcmethod_atomic_service_fun_task_C_, context, request, false);
}

::grpc::Status atomic_service_sf_Service::Stub::atomic_service_fun_task_D(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st& request, ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_atomic_service_fun_task_D_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>* atomic_service_sf_Service::Stub::Asyncatomic_service_fun_task_DRaw(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>::Create(channel_.get(), cq, rpcmethod_atomic_service_fun_task_D_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>* atomic_service_sf_Service::Stub::PrepareAsyncatomic_service_fun_task_DRaw(::grpc::ClientContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>::Create(channel_.get(), cq, rpcmethod_atomic_service_fun_task_D_, context, request, false);
}

atomic_service_sf_Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      atomic_service_sf_Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< atomic_service_sf_Service::Service, ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>(
          std::mem_fn(&atomic_service_sf_Service::Service::atomic_service_fun_task_C), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      atomic_service_sf_Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< atomic_service_sf_Service::Service, ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st, ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>(
          std::mem_fn(&atomic_service_sf_Service::Service::atomic_service_fun_task_D), this)));
}

atomic_service_sf_Service::Service::~Service() {
}

::grpc::Status atomic_service_sf_Service::Service::atomic_service_fun_task_C(::grpc::ServerContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st* request, ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status atomic_service_sf_Service::Service::atomic_service_fun_task_D(::grpc::ServerContext* context, const ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st* request, ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace atomic_service_sf_Package

