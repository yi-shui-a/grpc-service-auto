// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atomic_service_sf.proto

#ifndef PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto
#define PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_atomic_5fservice_5fsf_2eproto 

namespace protobuf_atomic_5fservice_5fsf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_atomic_5fservice_5fsf_2eproto
namespace atomic_service_sf_Package {
class atomic_service_sf_Reply_st;
class atomic_service_sf_Reply_stDefaultTypeInternal;
extern atomic_service_sf_Reply_stDefaultTypeInternal _atomic_service_sf_Reply_st_default_instance_;
class atomic_service_sf_Request_st;
class atomic_service_sf_Request_stDefaultTypeInternal;
extern atomic_service_sf_Request_stDefaultTypeInternal _atomic_service_sf_Request_st_default_instance_;
}  // namespace atomic_service_sf_Package
namespace google {
namespace protobuf {
template<> ::atomic_service_sf_Package::atomic_service_sf_Reply_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_Reply_st>(Arena*);
template<> ::atomic_service_sf_Package::atomic_service_sf_Request_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_Request_st>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace atomic_service_sf_Package {

// ===================================================================

class atomic_service_sf_Request_st : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_Request_st) */ {
 public:
  atomic_service_sf_Request_st();
  virtual ~atomic_service_sf_Request_st();

  atomic_service_sf_Request_st(const atomic_service_sf_Request_st& from);

  inline atomic_service_sf_Request_st& operator=(const atomic_service_sf_Request_st& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  atomic_service_sf_Request_st(atomic_service_sf_Request_st&& from) noexcept
    : atomic_service_sf_Request_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_Request_st& operator=(atomic_service_sf_Request_st&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const atomic_service_sf_Request_st& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const atomic_service_sf_Request_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_Request_st*>(
               &_atomic_service_sf_Request_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(atomic_service_sf_Request_st* other);
  friend void swap(atomic_service_sf_Request_st& a, atomic_service_sf_Request_st& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline atomic_service_sf_Request_st* New() const final {
    return CreateMaybeMessage<atomic_service_sf_Request_st>(NULL);
  }

  atomic_service_sf_Request_st* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<atomic_service_sf_Request_st>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const atomic_service_sf_Request_st& from);
  void MergeFrom(const atomic_service_sf_Request_st& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_Request_st* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_Request_st)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_atomic_5fservice_5fsf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class atomic_service_sf_Reply_st : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_Reply_st) */ {
 public:
  atomic_service_sf_Reply_st();
  virtual ~atomic_service_sf_Reply_st();

  atomic_service_sf_Reply_st(const atomic_service_sf_Reply_st& from);

  inline atomic_service_sf_Reply_st& operator=(const atomic_service_sf_Reply_st& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  atomic_service_sf_Reply_st(atomic_service_sf_Reply_st&& from) noexcept
    : atomic_service_sf_Reply_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_Reply_st& operator=(atomic_service_sf_Reply_st&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const atomic_service_sf_Reply_st& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const atomic_service_sf_Reply_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_Reply_st*>(
               &_atomic_service_sf_Reply_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(atomic_service_sf_Reply_st* other);
  friend void swap(atomic_service_sf_Reply_st& a, atomic_service_sf_Reply_st& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline atomic_service_sf_Reply_st* New() const final {
    return CreateMaybeMessage<atomic_service_sf_Reply_st>(NULL);
  }

  atomic_service_sf_Reply_st* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<atomic_service_sf_Reply_st>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const atomic_service_sf_Reply_st& from);
  void MergeFrom(const atomic_service_sf_Reply_st& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_Reply_st* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // int32 return_type = 2;
  void clear_return_type();
  static const int kReturnTypeFieldNumber = 2;
  ::google::protobuf::int32 return_type() const;
  void set_return_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_Reply_st)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 return_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_atomic_5fservice_5fsf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// atomic_service_sf_Request_st

// string name = 1;
inline void atomic_service_sf_Request_st::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& atomic_service_sf_Request_st::name() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
  return name_.GetNoArena();
}
inline void atomic_service_sf_Request_st::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
}
#if LANG_CXX11
inline void atomic_service_sf_Request_st::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
}
#endif
inline void atomic_service_sf_Request_st::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
}
inline void atomic_service_sf_Request_st::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
}
inline ::std::string* atomic_service_sf_Request_st::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* atomic_service_sf_Request_st::release_name() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void atomic_service_sf_Request_st::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_Request_st.name)
}

// string title = 2;
inline void atomic_service_sf_Request_st::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& atomic_service_sf_Request_st::title() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
  return title_.GetNoArena();
}
inline void atomic_service_sf_Request_st::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
}
#if LANG_CXX11
inline void atomic_service_sf_Request_st::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
}
#endif
inline void atomic_service_sf_Request_st::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
}
inline void atomic_service_sf_Request_st::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
}
inline ::std::string* atomic_service_sf_Request_st::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* atomic_service_sf_Request_st::release_title() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void atomic_service_sf_Request_st::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_Request_st.title)
}

// -------------------------------------------------------------------

// atomic_service_sf_Reply_st

// string result = 1;
inline void atomic_service_sf_Reply_st::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& atomic_service_sf_Reply_st::result() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
  return result_.GetNoArena();
}
inline void atomic_service_sf_Reply_st::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
}
#if LANG_CXX11
inline void atomic_service_sf_Reply_st::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
}
#endif
inline void atomic_service_sf_Reply_st::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
}
inline void atomic_service_sf_Reply_st::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
}
inline ::std::string* atomic_service_sf_Reply_st::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* atomic_service_sf_Reply_st::release_result() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void atomic_service_sf_Reply_st::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_Reply_st.result)
}

// int32 return_type = 2;
inline void atomic_service_sf_Reply_st::clear_return_type() {
  return_type_ = 0;
}
inline ::google::protobuf::int32 atomic_service_sf_Reply_st::return_type() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_Reply_st.return_type)
  return return_type_;
}
inline void atomic_service_sf_Reply_st::set_return_type(::google::protobuf::int32 value) {
  
  return_type_ = value;
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_Reply_st.return_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace atomic_service_sf_Package

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto
