// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atomic_service_sf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_atomic_5fservice_5fsf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_atomic_5fservice_5fsf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_atomic_5fservice_5fsf_2eproto;
namespace atomic_service_sf_Package {
class atomic_service_sf_task_C_Reply_st;
struct atomic_service_sf_task_C_Reply_stDefaultTypeInternal;
extern atomic_service_sf_task_C_Reply_stDefaultTypeInternal _atomic_service_sf_task_C_Reply_st_default_instance_;
class atomic_service_sf_task_C_Request_st;
struct atomic_service_sf_task_C_Request_stDefaultTypeInternal;
extern atomic_service_sf_task_C_Request_stDefaultTypeInternal _atomic_service_sf_task_C_Request_st_default_instance_;
class atomic_service_sf_task_D_Reply_st;
struct atomic_service_sf_task_D_Reply_stDefaultTypeInternal;
extern atomic_service_sf_task_D_Reply_stDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_default_instance_;
class atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse;
struct atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal;
extern atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal _atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_;
class atomic_service_sf_task_D_Request_st;
struct atomic_service_sf_task_D_Request_stDefaultTypeInternal;
extern atomic_service_sf_task_D_Request_stDefaultTypeInternal _atomic_service_sf_task_D_Request_st_default_instance_;
}  // namespace atomic_service_sf_Package
PROTOBUF_NAMESPACE_OPEN
template<> ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st>(Arena*);
template<> ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st>(Arena*);
template<> ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st>(Arena*);
template<> ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse>(Arena*);
template<> ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st* Arena::CreateMaybeMessage<::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atomic_service_sf_Package {

// ===================================================================

class atomic_service_sf_task_C_Request_st final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st) */ {
 public:
  inline atomic_service_sf_task_C_Request_st() : atomic_service_sf_task_C_Request_st(nullptr) {}
  ~atomic_service_sf_task_C_Request_st() override;
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Request_st(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atomic_service_sf_task_C_Request_st(const atomic_service_sf_task_C_Request_st& from);
  atomic_service_sf_task_C_Request_st(atomic_service_sf_task_C_Request_st&& from) noexcept
    : atomic_service_sf_task_C_Request_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_task_C_Request_st& operator=(const atomic_service_sf_task_C_Request_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_C_Request_st& operator=(atomic_service_sf_task_C_Request_st&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_C_Request_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_C_Request_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_C_Request_st*>(
               &_atomic_service_sf_task_C_Request_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(atomic_service_sf_task_C_Request_st& a, atomic_service_sf_task_C_Request_st& b) {
    a.Swap(&b);
  }
  inline void Swap(atomic_service_sf_task_C_Request_st* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_C_Request_st* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_C_Request_st* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<atomic_service_sf_task_C_Request_st>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_C_Request_st& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const atomic_service_sf_task_C_Request_st& from) {
    atomic_service_sf_task_C_Request_st::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_task_C_Request_st* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st";
  }
  protected:
  explicit atomic_service_sf_task_C_Request_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_C_Reply_st final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st) */ {
 public:
  inline atomic_service_sf_task_C_Reply_st() : atomic_service_sf_task_C_Reply_st(nullptr) {}
  ~atomic_service_sf_task_C_Reply_st() override;
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_C_Reply_st(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atomic_service_sf_task_C_Reply_st(const atomic_service_sf_task_C_Reply_st& from);
  atomic_service_sf_task_C_Reply_st(atomic_service_sf_task_C_Reply_st&& from) noexcept
    : atomic_service_sf_task_C_Reply_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_task_C_Reply_st& operator=(const atomic_service_sf_task_C_Reply_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_C_Reply_st& operator=(atomic_service_sf_task_C_Reply_st&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_C_Reply_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_C_Reply_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_C_Reply_st*>(
               &_atomic_service_sf_task_C_Reply_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(atomic_service_sf_task_C_Reply_st& a, atomic_service_sf_task_C_Reply_st& b) {
    a.Swap(&b);
  }
  inline void Swap(atomic_service_sf_task_C_Reply_st* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_C_Reply_st* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_C_Reply_st* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<atomic_service_sf_task_C_Reply_st>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_C_Reply_st& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const atomic_service_sf_task_C_Reply_st& from) {
    atomic_service_sf_task_C_Reply_st::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_task_C_Reply_st* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st";
  }
  protected:
  explicit atomic_service_sf_task_C_Reply_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 return_type = 2;
  void clear_return_type();
  int32_t return_type() const;
  void set_return_type(int32_t value);
  private:
  int32_t _internal_return_type() const;
  void _internal_set_return_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    int32_t return_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_D_Request_st final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st) */ {
 public:
  inline atomic_service_sf_task_D_Request_st() : atomic_service_sf_task_D_Request_st(nullptr) {}
  ~atomic_service_sf_task_D_Request_st() override;
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Request_st(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atomic_service_sf_task_D_Request_st(const atomic_service_sf_task_D_Request_st& from);
  atomic_service_sf_task_D_Request_st(atomic_service_sf_task_D_Request_st&& from) noexcept
    : atomic_service_sf_task_D_Request_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_task_D_Request_st& operator=(const atomic_service_sf_task_D_Request_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_D_Request_st& operator=(atomic_service_sf_task_D_Request_st&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_D_Request_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_D_Request_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_D_Request_st*>(
               &_atomic_service_sf_task_D_Request_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(atomic_service_sf_task_D_Request_st& a, atomic_service_sf_task_D_Request_st& b) {
    a.Swap(&b);
  }
  inline void Swap(atomic_service_sf_task_D_Request_st* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_D_Request_st* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_D_Request_st* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<atomic_service_sf_task_D_Request_st>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_D_Request_st& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const atomic_service_sf_task_D_Request_st& from) {
    atomic_service_sf_task_D_Request_st::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_task_D_Request_st* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atomic_service_sf_Package.atomic_service_sf_task_D_Request_st";
  }
  protected:
  explicit atomic_service_sf_task_D_Request_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntArrayFieldNumber = 1,
  };
  // repeated int32 int_array = 1;
  int int_array_size() const;
  private:
  int _internal_int_array_size() const;
  public:
  void clear_int_array();
  private:
  int32_t _internal_int_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int_array() const;
  void _internal_add_int_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int_array();
  public:
  int32_t int_array(int index) const;
  void set_int_array(int index, int32_t value);
  void add_int_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int_array();

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int_array_;
    mutable std::atomic<int> _int_array_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// -------------------------------------------------------------------

class atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse& other);
  static const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse*>(&_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.StringIntMapReplyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};

// -------------------------------------------------------------------

class atomic_service_sf_task_D_Reply_st final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st) */ {
 public:
  inline atomic_service_sf_task_D_Reply_st() : atomic_service_sf_task_D_Reply_st(nullptr) {}
  ~atomic_service_sf_task_D_Reply_st() override;
  explicit PROTOBUF_CONSTEXPR atomic_service_sf_task_D_Reply_st(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atomic_service_sf_task_D_Reply_st(const atomic_service_sf_task_D_Reply_st& from);
  atomic_service_sf_task_D_Reply_st(atomic_service_sf_task_D_Reply_st&& from) noexcept
    : atomic_service_sf_task_D_Reply_st() {
    *this = ::std::move(from);
  }

  inline atomic_service_sf_task_D_Reply_st& operator=(const atomic_service_sf_task_D_Reply_st& from) {
    CopyFrom(from);
    return *this;
  }
  inline atomic_service_sf_task_D_Reply_st& operator=(atomic_service_sf_task_D_Reply_st&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atomic_service_sf_task_D_Reply_st& default_instance() {
    return *internal_default_instance();
  }
  static inline const atomic_service_sf_task_D_Reply_st* internal_default_instance() {
    return reinterpret_cast<const atomic_service_sf_task_D_Reply_st*>(
               &_atomic_service_sf_task_D_Reply_st_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(atomic_service_sf_task_D_Reply_st& a, atomic_service_sf_task_D_Reply_st& b) {
    a.Swap(&b);
  }
  inline void Swap(atomic_service_sf_task_D_Reply_st* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atomic_service_sf_task_D_Reply_st* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  atomic_service_sf_task_D_Reply_st* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<atomic_service_sf_task_D_Reply_st>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atomic_service_sf_task_D_Reply_st& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const atomic_service_sf_task_D_Reply_st& from) {
    atomic_service_sf_task_D_Reply_st::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atomic_service_sf_task_D_Reply_st* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st";
  }
  protected:
  explicit atomic_service_sf_task_D_Reply_st(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStringIntMapReplyFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
  };
  // map<string, int32> string_int_map_reply = 1;
  int string_int_map_reply_size() const;
  private:
  int _internal_string_int_map_reply_size() const;
  public:
  void clear_string_int_map_reply();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_string_int_map_reply() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_string_int_map_reply();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      string_int_map_reply() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_string_int_map_reply();

  // int32 return_type = 2;
  void clear_return_type();
  int32_t return_type() const;
  void set_return_type(int32_t value);
  private:
  int32_t _internal_return_type() const;
  void _internal_set_return_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> string_int_map_reply_;
    int32_t return_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fservice_5fsf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// atomic_service_sf_task_C_Request_st

// string name = 1;
inline void atomic_service_sf_task_C_Request_st::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Request_st::name() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atomic_service_sf_task_C_Request_st::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
}
inline std::string* atomic_service_sf_task_C_Request_st::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Request_st::_internal_name() const {
  return _impl_.name_.Get();
}
inline void atomic_service_sf_task_C_Request_st::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Request_st::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Request_st::release_name() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
  return _impl_.name_.Release();
}
inline void atomic_service_sf_task_C_Request_st::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name)
}

// string title = 2;
inline void atomic_service_sf_task_C_Request_st::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Request_st::title() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atomic_service_sf_task_C_Request_st::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
}
inline std::string* atomic_service_sf_task_C_Request_st::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Request_st::_internal_title() const {
  return _impl_.title_.Get();
}
inline void atomic_service_sf_task_C_Request_st::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Request_st::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Request_st::release_title() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
  return _impl_.title_.Release();
}
inline void atomic_service_sf_task_C_Request_st::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title)
}

// -------------------------------------------------------------------

// atomic_service_sf_task_C_Reply_st

// string result = 1;
inline void atomic_service_sf_task_C_Reply_st::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& atomic_service_sf_task_C_Reply_st::result() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atomic_service_sf_task_C_Reply_st::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
}
inline std::string* atomic_service_sf_task_C_Reply_st::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _s;
}
inline const std::string& atomic_service_sf_task_C_Reply_st::_internal_result() const {
  return _impl_.result_.Get();
}
inline void atomic_service_sf_task_C_Reply_st::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Reply_st::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* atomic_service_sf_task_C_Reply_st::release_result() {
  // @@protoc_insertion_point(field_release:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
  return _impl_.result_.Release();
}
inline void atomic_service_sf_task_C_Reply_st::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result)
}

// int32 return_type = 2;
inline void atomic_service_sf_task_C_Reply_st::clear_return_type() {
  _impl_.return_type_ = 0;
}
inline int32_t atomic_service_sf_task_C_Reply_st::_internal_return_type() const {
  return _impl_.return_type_;
}
inline int32_t atomic_service_sf_task_C_Reply_st::return_type() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.return_type)
  return _internal_return_type();
}
inline void atomic_service_sf_task_C_Reply_st::_internal_set_return_type(int32_t value) {
  
  _impl_.return_type_ = value;
}
inline void atomic_service_sf_task_C_Reply_st::set_return_type(int32_t value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.return_type)
}

// -------------------------------------------------------------------

// atomic_service_sf_task_D_Request_st

// repeated int32 int_array = 1;
inline int atomic_service_sf_task_D_Request_st::_internal_int_array_size() const {
  return _impl_.int_array_.size();
}
inline int atomic_service_sf_task_D_Request_st::int_array_size() const {
  return _internal_int_array_size();
}
inline void atomic_service_sf_task_D_Request_st::clear_int_array() {
  _impl_.int_array_.Clear();
}
inline int32_t atomic_service_sf_task_D_Request_st::_internal_int_array(int index) const {
  return _impl_.int_array_.Get(index);
}
inline int32_t atomic_service_sf_task_D_Request_st::int_array(int index) const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  return _internal_int_array(index);
}
inline void atomic_service_sf_task_D_Request_st::set_int_array(int index, int32_t value) {
  _impl_.int_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
}
inline void atomic_service_sf_task_D_Request_st::_internal_add_int_array(int32_t value) {
  _impl_.int_array_.Add(value);
}
inline void atomic_service_sf_task_D_Request_st::add_int_array(int32_t value) {
  _internal_add_int_array(value);
  // @@protoc_insertion_point(field_add:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
atomic_service_sf_task_D_Request_st::_internal_int_array() const {
  return _impl_.int_array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
atomic_service_sf_task_D_Request_st::int_array() const {
  // @@protoc_insertion_point(field_list:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  return _internal_int_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
atomic_service_sf_task_D_Request_st::_internal_mutable_int_array() {
  return &_impl_.int_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
atomic_service_sf_task_D_Request_st::mutable_int_array() {
  // @@protoc_insertion_point(field_mutable_list:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st.int_array)
  return _internal_mutable_int_array();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// atomic_service_sf_task_D_Reply_st

// map<string, int32> string_int_map_reply = 1;
inline int atomic_service_sf_task_D_Reply_st::_internal_string_int_map_reply_size() const {
  return _impl_.string_int_map_reply_.size();
}
inline int atomic_service_sf_task_D_Reply_st::string_int_map_reply_size() const {
  return _internal_string_int_map_reply_size();
}
inline void atomic_service_sf_task_D_Reply_st::clear_string_int_map_reply() {
  _impl_.string_int_map_reply_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
atomic_service_sf_task_D_Reply_st::_internal_string_int_map_reply() const {
  return _impl_.string_int_map_reply_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
atomic_service_sf_task_D_Reply_st::string_int_map_reply() const {
  // @@protoc_insertion_point(field_map:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.string_int_map_reply)
  return _internal_string_int_map_reply();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
atomic_service_sf_task_D_Reply_st::_internal_mutable_string_int_map_reply() {
  return _impl_.string_int_map_reply_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
atomic_service_sf_task_D_Reply_st::mutable_string_int_map_reply() {
  // @@protoc_insertion_point(field_mutable_map:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.string_int_map_reply)
  return _internal_mutable_string_int_map_reply();
}

// int32 return_type = 2;
inline void atomic_service_sf_task_D_Reply_st::clear_return_type() {
  _impl_.return_type_ = 0;
}
inline int32_t atomic_service_sf_task_D_Reply_st::_internal_return_type() const {
  return _impl_.return_type_;
}
inline int32_t atomic_service_sf_task_D_Reply_st::return_type() const {
  // @@protoc_insertion_point(field_get:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.return_type)
  return _internal_return_type();
}
inline void atomic_service_sf_task_D_Reply_st::_internal_set_return_type(int32_t value) {
  
  _impl_.return_type_ = value;
}
inline void atomic_service_sf_task_D_Reply_st::set_return_type(int32_t value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.return_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace atomic_service_sf_Package

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_atomic_5fservice_5fsf_2eproto
