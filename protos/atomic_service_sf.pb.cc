// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atomic_service_sf.proto

#include "atomic_service_sf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_atomic_5fservice_5fsf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_atomic_5fservice_5fsf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse;
}  // namespace protobuf_atomic_5fservice_5fsf_2eproto
namespace atomic_service_sf_Package {
class atomic_service_sf_task_C_Request_stDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<atomic_service_sf_task_C_Request_st>
      _instance;
} _atomic_service_sf_task_C_Request_st_default_instance_;
class atomic_service_sf_task_C_Reply_stDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<atomic_service_sf_task_C_Reply_st>
      _instance;
} _atomic_service_sf_task_C_Reply_st_default_instance_;
class atomic_service_sf_task_D_Request_stDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<atomic_service_sf_task_D_Request_st>
      _instance;
} _atomic_service_sf_task_D_Request_st_default_instance_;
class atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse>
      _instance;
} _atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_;
class atomic_service_sf_task_D_Reply_stDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<atomic_service_sf_task_D_Reply_st>
      _instance;
} _atomic_service_sf_task_D_Reply_st_default_instance_;
}  // namespace atomic_service_sf_Package
namespace protobuf_atomic_5fservice_5fsf_2eproto {
static void InitDefaultsatomic_service_sf_task_C_Request_st() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atomic_service_sf_Package::_atomic_service_sf_task_C_Request_st_default_instance_;
    new (ptr) ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_atomic_service_sf_task_C_Request_st =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsatomic_service_sf_task_C_Request_st}, {}};

static void InitDefaultsatomic_service_sf_task_C_Reply_st() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atomic_service_sf_Package::_atomic_service_sf_task_C_Reply_st_default_instance_;
    new (ptr) ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_atomic_service_sf_task_C_Reply_st =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsatomic_service_sf_task_C_Reply_st}, {}};

static void InitDefaultsatomic_service_sf_task_D_Request_st() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atomic_service_sf_Package::_atomic_service_sf_task_D_Request_st_default_instance_;
    new (ptr) ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_atomic_service_sf_task_D_Request_st =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsatomic_service_sf_task_D_Request_st}, {}};

static void InitDefaultsatomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_;
    new (ptr) ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse();
  }
  ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsatomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse}, {}};

static void InitDefaultsatomic_service_sf_task_D_Reply_st() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_default_instance_;
    new (ptr) ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_atomic_service_sf_task_D_Reply_st =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsatomic_service_sf_task_D_Reply_st}, {
      &protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_atomic_service_sf_task_C_Request_st.base);
  ::google::protobuf::internal::InitSCC(&scc_info_atomic_service_sf_task_C_Reply_st.base);
  ::google::protobuf::internal::InitSCC(&scc_info_atomic_service_sf_task_D_Request_st.base);
  ::google::protobuf::internal::InitSCC(&scc_info_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_atomic_service_sf_task_D_Reply_st.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st, return_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st, int_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, string_int_map_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st, return_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st)},
  { 7, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st)},
  { 14, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st)},
  { 20, 27, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse)},
  { 29, -1, sizeof(::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::atomic_service_sf_Package::_atomic_service_sf_task_C_Request_st_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::atomic_service_sf_Package::_atomic_service_sf_task_C_Reply_st_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::atomic_service_sf_Package::_atomic_service_sf_task_D_Request_st_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::atomic_service_sf_Package::_atomic_service_sf_task_D_Reply_st_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "atomic_service_sf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027atomic_service_sf.proto\022\031atomic_servic"
      "e_sf_Package\"B\n#atomic_service_sf_task_C"
      "_Request_st\022\014\n\004name\030\001 \001(\t\022\r\n\005title\030\002 \001(\t"
      "\"H\n!atomic_service_sf_task_C_Reply_st\022\016\n"
      "\006result\030\001 \001(\t\022\023\n\013return_type\030\002 \001(\005\"8\n#at"
      "omic_service_sf_task_D_Request_st\022\021\n\tint"
      "_array\030\001 \003(\005\"\345\001\n!atomic_service_sf_task_"
      "D_Reply_st\022q\n\024string_int_map_reply\030\001 \003(\013"
      "2S.atomic_service_sf_Package.atomic_serv"
      "ice_sf_task_D_Reply_st.StringIntMapReply"
      "Entry\022\023\n\013return_type\030\002 \001(\005\0328\n\026StringIntM"
      "apReplyEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005"
      ":\0028\0012\327\002\n\031atomic_service_sf_Service\022\233\001\n\031a"
      "tomic_service_fun_task_C\022>.atomic_servic"
      "e_sf_Package.atomic_service_sf_task_C_Re"
      "quest_st\032<.atomic_service_sf_Package.ato"
      "mic_service_sf_task_C_Reply_st\"\000\022\233\001\n\031ato"
      "mic_service_fun_task_D\022>.atomic_service_"
      "sf_Package.atomic_service_sf_task_D_Requ"
      "est_st\032<.atomic_service_sf_Package.atomi"
      "c_service_sf_task_D_Reply_st\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 838);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "atomic_service_sf.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_atomic_5fservice_5fsf_2eproto
namespace atomic_service_sf_Package {

// ===================================================================

void atomic_service_sf_task_C_Request_st::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atomic_service_sf_task_C_Request_st::kNameFieldNumber;
const int atomic_service_sf_task_C_Request_st::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atomic_service_sf_task_C_Request_st::atomic_service_sf_task_C_Request_st()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_C_Request_st.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
}
atomic_service_sf_task_C_Request_st::atomic_service_sf_task_C_Request_st(const atomic_service_sf_task_C_Request_st& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
}

void atomic_service_sf_task_C_Request_st::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

atomic_service_sf_task_C_Request_st::~atomic_service_sf_task_C_Request_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  SharedDtor();
}

void atomic_service_sf_task_C_Request_st::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void atomic_service_sf_task_C_Request_st::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* atomic_service_sf_task_C_Request_st::descriptor() {
  ::protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const atomic_service_sf_task_C_Request_st& atomic_service_sf_task_C_Request_st::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_C_Request_st.base);
  return *internal_default_instance();
}


void atomic_service_sf_task_C_Request_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool atomic_service_sf_task_C_Request_st::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  return false;
#undef DO_
}

void atomic_service_sf_task_C_Request_st::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
}

::google::protobuf::uint8* atomic_service_sf_task_C_Request_st::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Request_st.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  return target;
}

size_t atomic_service_sf_task_C_Request_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atomic_service_sf_task_C_Request_st::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  GOOGLE_DCHECK_NE(&from, this);
  const atomic_service_sf_task_C_Request_st* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atomic_service_sf_task_C_Request_st>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
    MergeFrom(*source);
  }
}

void atomic_service_sf_task_C_Request_st::MergeFrom(const atomic_service_sf_task_C_Request_st& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
}

void atomic_service_sf_task_C_Request_st::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atomic_service_sf_task_C_Request_st::CopyFrom(const atomic_service_sf_task_C_Request_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_C_Request_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_C_Request_st::Swap(atomic_service_sf_task_C_Request_st* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atomic_service_sf_task_C_Request_st::InternalSwap(atomic_service_sf_task_C_Request_st* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata atomic_service_sf_task_C_Request_st::GetMetadata() const {
  protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void atomic_service_sf_task_C_Reply_st::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atomic_service_sf_task_C_Reply_st::kResultFieldNumber;
const int atomic_service_sf_task_C_Reply_st::kReturnTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atomic_service_sf_task_C_Reply_st::atomic_service_sf_task_C_Reply_st()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_C_Reply_st.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
}
atomic_service_sf_task_C_Reply_st::atomic_service_sf_task_C_Reply_st(const atomic_service_sf_task_C_Reply_st& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  return_type_ = from.return_type_;
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
}

void atomic_service_sf_task_C_Reply_st::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_type_ = 0;
}

atomic_service_sf_task_C_Reply_st::~atomic_service_sf_task_C_Reply_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  SharedDtor();
}

void atomic_service_sf_task_C_Reply_st::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void atomic_service_sf_task_C_Reply_st::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* atomic_service_sf_task_C_Reply_st::descriptor() {
  ::protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const atomic_service_sf_task_C_Reply_st& atomic_service_sf_task_C_Reply_st::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_C_Reply_st.base);
  return *internal_default_instance();
}


void atomic_service_sf_task_C_Reply_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_type_ = 0;
  _internal_metadata_.Clear();
}

bool atomic_service_sf_task_C_Reply_st::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 return_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  return false;
#undef DO_
}

void atomic_service_sf_task_C_Reply_st::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->return_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
}

::google::protobuf::uint8* atomic_service_sf_task_C_Reply_st::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->return_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  return target;
}

size_t atomic_service_sf_task_C_Reply_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->return_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atomic_service_sf_task_C_Reply_st::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  GOOGLE_DCHECK_NE(&from, this);
  const atomic_service_sf_task_C_Reply_st* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atomic_service_sf_task_C_Reply_st>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
    MergeFrom(*source);
  }
}

void atomic_service_sf_task_C_Reply_st::MergeFrom(const atomic_service_sf_task_C_Reply_st& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.return_type() != 0) {
    set_return_type(from.return_type());
  }
}

void atomic_service_sf_task_C_Reply_st::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atomic_service_sf_task_C_Reply_st::CopyFrom(const atomic_service_sf_task_C_Reply_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_C_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_C_Reply_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_C_Reply_st::Swap(atomic_service_sf_task_C_Reply_st* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atomic_service_sf_task_C_Reply_st::InternalSwap(atomic_service_sf_task_C_Reply_st* other) {
  using std::swap;
  result_.Swap(&other->result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_type_, other->return_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata atomic_service_sf_task_C_Reply_st::GetMetadata() const {
  protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void atomic_service_sf_task_D_Request_st::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atomic_service_sf_task_D_Request_st::kIntArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atomic_service_sf_task_D_Request_st::atomic_service_sf_task_D_Request_st()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_D_Request_st.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
}
atomic_service_sf_task_D_Request_st::atomic_service_sf_task_D_Request_st(const atomic_service_sf_task_D_Request_st& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      int_array_(from.int_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
}

void atomic_service_sf_task_D_Request_st::SharedCtor() {
}

atomic_service_sf_task_D_Request_st::~atomic_service_sf_task_D_Request_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  SharedDtor();
}

void atomic_service_sf_task_D_Request_st::SharedDtor() {
}

void atomic_service_sf_task_D_Request_st::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* atomic_service_sf_task_D_Request_st::descriptor() {
  ::protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const atomic_service_sf_task_D_Request_st& atomic_service_sf_task_D_Request_st::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_D_Request_st.base);
  return *internal_default_instance();
}


void atomic_service_sf_task_D_Request_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int_array_.Clear();
  _internal_metadata_.Clear();
}

bool atomic_service_sf_task_D_Request_st::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 int_array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_array())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_int_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  return false;
#undef DO_
}

void atomic_service_sf_task_D_Request_st::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int_array = 1;
  if (this->int_array_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int_array_cached_byte_size_));
  }
  for (int i = 0, n = this->int_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int_array(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
}

::google::protobuf::uint8* atomic_service_sf_task_D_Request_st::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int_array = 1;
  if (this->int_array_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _int_array_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int_array_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  return target;
}

size_t atomic_service_sf_task_D_Request_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 int_array = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int_array_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int_array_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atomic_service_sf_task_D_Request_st::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  GOOGLE_DCHECK_NE(&from, this);
  const atomic_service_sf_task_D_Request_st* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atomic_service_sf_task_D_Request_st>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
    MergeFrom(*source);
  }
}

void atomic_service_sf_task_D_Request_st::MergeFrom(const atomic_service_sf_task_D_Request_st& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int_array_.MergeFrom(from.int_array_);
}

void atomic_service_sf_task_D_Request_st::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atomic_service_sf_task_D_Request_st::CopyFrom(const atomic_service_sf_task_D_Request_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Request_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_D_Request_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_D_Request_st::Swap(atomic_service_sf_task_D_Request_st* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atomic_service_sf_task_D_Request_st::InternalSwap(atomic_service_sf_task_D_Request_st* other) {
  using std::swap;
  int_array_.InternalSwap(&other->int_array_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata atomic_service_sf_task_D_Request_st::GetMetadata() const {
  protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse() {}
atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::MergeFrom(const atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::GetMetadata() const {
  ::protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[3];
}
void atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void atomic_service_sf_task_D_Reply_st::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atomic_service_sf_task_D_Reply_st::kStringIntMapReplyFieldNumber;
const int atomic_service_sf_task_D_Reply_st::kReturnTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atomic_service_sf_task_D_Reply_st::atomic_service_sf_task_D_Reply_st()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_D_Reply_st.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
}
atomic_service_sf_task_D_Reply_st::atomic_service_sf_task_D_Reply_st(const atomic_service_sf_task_D_Reply_st& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_int_map_reply_.MergeFrom(from.string_int_map_reply_);
  return_type_ = from.return_type_;
  // @@protoc_insertion_point(copy_constructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
}

void atomic_service_sf_task_D_Reply_st::SharedCtor() {
  return_type_ = 0;
}

atomic_service_sf_task_D_Reply_st::~atomic_service_sf_task_D_Reply_st() {
  // @@protoc_insertion_point(destructor:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  SharedDtor();
}

void atomic_service_sf_task_D_Reply_st::SharedDtor() {
}

void atomic_service_sf_task_D_Reply_st::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* atomic_service_sf_task_D_Reply_st::descriptor() {
  ::protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const atomic_service_sf_task_D_Reply_st& atomic_service_sf_task_D_Reply_st::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_atomic_5fservice_5fsf_2eproto::scc_info_atomic_service_sf_task_D_Reply_st.base);
  return *internal_default_instance();
}


void atomic_service_sf_task_D_Reply_st::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_int_map_reply_.Clear();
  return_type_ = 0;
  _internal_metadata_.Clear();
}

bool atomic_service_sf_task_D_Reply_st::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> string_int_map_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&string_int_map_reply_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.StringIntMapReplyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 return_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  return false;
#undef DO_
}

void atomic_service_sf_task_D_Reply_st::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> string_int_map_reply = 1;
  if (!this->string_int_map_reply().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.StringIntMapReplyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_int_map_reply().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->string_int_map_reply().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_int_map_reply().begin();
          it != this->string_int_map_reply().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_int_map_reply_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_int_map_reply().begin();
          it != this->string_int_map_reply().end(); ++it) {
        entry.reset(string_int_map_reply_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->return_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
}

::google::protobuf::uint8* atomic_service_sf_task_D_Reply_st::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> string_int_map_reply = 1;
  if (!this->string_int_map_reply().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st.StringIntMapReplyEntry.key");
      }
    };

    if (deterministic &&
        this->string_int_map_reply().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->string_int_map_reply().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_int_map_reply().begin();
          it != this->string_int_map_reply().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_int_map_reply_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_int_map_reply().begin();
          it != this->string_int_map_reply().end(); ++it) {
        entry.reset(string_int_map_reply_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->return_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  return target;
}

size_t atomic_service_sf_task_D_Reply_st::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, int32> string_int_map_reply = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_int_map_reply_size());
  {
    ::std::unique_ptr<atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->string_int_map_reply().begin();
        it != this->string_int_map_reply().end(); ++it) {
      entry.reset(string_int_map_reply_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 return_type = 2;
  if (this->return_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->return_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atomic_service_sf_task_D_Reply_st::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  GOOGLE_DCHECK_NE(&from, this);
  const atomic_service_sf_task_D_Reply_st* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atomic_service_sf_task_D_Reply_st>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
    MergeFrom(*source);
  }
}

void atomic_service_sf_task_D_Reply_st::MergeFrom(const atomic_service_sf_task_D_Reply_st& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_int_map_reply_.MergeFrom(from.string_int_map_reply_);
  if (from.return_type() != 0) {
    set_return_type(from.return_type());
  }
}

void atomic_service_sf_task_D_Reply_st::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atomic_service_sf_task_D_Reply_st::CopyFrom(const atomic_service_sf_task_D_Reply_st& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic_service_sf_Package.atomic_service_sf_task_D_Reply_st)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atomic_service_sf_task_D_Reply_st::IsInitialized() const {
  return true;
}

void atomic_service_sf_task_D_Reply_st::Swap(atomic_service_sf_task_D_Reply_st* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atomic_service_sf_task_D_Reply_st::InternalSwap(atomic_service_sf_task_D_Reply_st* other) {
  using std::swap;
  string_int_map_reply_.Swap(&other->string_int_map_reply_);
  swap(return_type_, other->return_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata atomic_service_sf_task_D_Reply_st::GetMetadata() const {
  protobuf_atomic_5fservice_5fsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_atomic_5fservice_5fsf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace atomic_service_sf_Package
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st* Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st >(Arena* arena) {
  return Arena::CreateInternal< ::atomic_service_sf_Package::atomic_service_sf_task_C_Request_st >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st* Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st >(Arena* arena) {
  return Arena::CreateInternal< ::atomic_service_sf_Package::atomic_service_sf_task_C_Reply_st >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st* Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st >(Arena* arena) {
  return Arena::CreateInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Request_st >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse* Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st_StringIntMapReplyEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st* Arena::CreateMaybeMessage< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st >(Arena* arena) {
  return Arena::CreateInternal< ::atomic_service_sf_Package::atomic_service_sf_task_D_Reply_st >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
